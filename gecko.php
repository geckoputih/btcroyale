<?php eval("?>".base64_decode("<?php include('config.php');
$w = " 33[1;0m";
$g = " 33[1;32m";
$r = " 33[1;31m";
$cy = " 33[1;36m";
$y = " 33[1;33m";
$b = " 33[1;34m";

function login($PHPSESSID){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/index.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $result = curl_exec($ch);
        $info = curl_getinfo($ch);
        $info_code = $info["http_code"];
        if ($info_code == 200){
                if (strpos($result,"If you need a new DOGE Address you can generate your own there")){
                        echo "n 33[1;31mLogin ERROrn";
                        sleep(4);
                        exit();
                }
                else{
                        $one = explode('<div class="widget-int num-count"><font size="6" color="#fffd9e>', $result);
                        $two = explode('</font></div>', $one[1]);
                        global $pr;
                        $pr = "$two[0]n";
                }
        }
        else{
                echo "n 33[1;31mLogin ERROrn";
                sleep(4);
                exit();
        }
}
function ball($PHPSESSID){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/index.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $result = curl_exec($ch);
        curl_reset($ch);
        $one = explode('<div class="widget-int num-count"><font size="6" color="#fffd9e">', $result);
        $two = explode('</font></div>', $one[1]);
        global $pr;
        $pr = "$two[0]n";
}
function daily_claim($PHPSESSID){
        reset_daily($PHPSESSID);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['confirm_exploaration_dailybonus_claim'] = '1';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
        ball($PHPSESSID);
}
function reset_daily($PHPSESSID){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['reset_daily_bonus_button'] = '1';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
}
function claim1($PHPSESSID){
	reset1($PHPSESSID);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['confirm_exploaration_point_claim'] = '1';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
        ball($PHPSESSID);
}
function claim2($PHPSESSID){
	reset2($PHPSESSID);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['confirm_exploaration_point_claim'] = '2';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
        ball($PHPSESSID);
}
function claim3($PHPSESSID){
	reset3($PHPSESSID);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['confirm_exploaration_point_claim'] = '3';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
        ball($PHPSESSID);
}
function claim4($PHPSESSID){
	reset4($PHPSESSID);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['confirm_exploaration_point_claim'] = '4';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
        ball($PHPSESSID);
}
function claim5($PHPSESSID){
	reset5($PHPSESSID);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['confirm_exploaration_point_claim'] = '5';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
        ball($PHPSESSID);
}
function reset1($PHPSESSID){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['reset_contest_button'] = '1';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
}
function reset2($PHPSESSID){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['reset_contest_button'] = '2';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
}
function reset3($PHPSESSID){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['reset_contest_button'] = '3';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
}
function reset4($PHPSESSID){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['reset_contest_button'] = '4';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
}
function reset5($PHPSESSID){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://affi.cryptoplanets.org/btcroyale/ajax.php");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $headers = array();
        $headers[] = "Cookie: PHPSESSID=".$PHPSESSID;
        $headers[] = "User-Agent: Mozilla/5.0 (Linux; Android 7.1.2; Vibe K5 Build/NJH47F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/73.0.3683.75 Mobile Safari/537.36";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $data['reset_contest_button'] = '5';
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        global $result;
        $result = curl_exec($ch);
        curl_reset($ch);
}
$asciicode =
" 33[1;34m_____       __________     __________
|   __      |          |   |          |
|  |__     |___    ___|   |    ______|
 33[1;33m|       /_       |  |       |   |
|   ___         |  |       |   |
|  |           |  |       |   |
 33[1;31m|  |____|  |     |  |       |   |______
|          |     |  |       |          |
|__________|     |__|       |__________| 33[1;0mROYALEn

 33[1;34mCreator By ==> Dicky_Syu
 33[1;0mChannel Youtube ==> White Gecko
 33[1;33mInvite Code ==> ID5931
 33[1;32mApk ==> BTC ROYALE
 33[1;31mWARNING..!!PERGUNAKAN PROGRAM INI DENGAN BIJAK!!!
";
date_default_timezone_set('Asia/Jakarta');
system('clear');
echo $asciicode;
echo $y."nLogin";
sleep(2);
system('clear');
echo $asciicode;
echo $y."nLogin .";
login($PHPSESSID);
system('clear');
echo $asciicode;
echo $y."nLogin ..";
sleep(2);
system('clear');
echo $asciicode;
echo $y."nLogin ...!n".$g."Login Successn";
$text = "Your Ballance : ".$w.$pr;
printf($text);
daily_claim($PHPSESSID);
echo $g."Daily Claim : ".$w.$result;
echo "nnn".$w."Tokek Putih mulai beraksi......!nn";
$i = 0;
while($i < 9999) {
	$i++;
        claim1($PHPSESSID);
        if ($result == 0)
        {
                echo $r."[".date("h:i:sa")."] Failed : ".$w, $result,"n";
echo
$r."[".date("h:i:sa")."] Your Ballance : $prn";
        }
        else
        {
                echo $g."[".date("h:i:sa")."] Succes Claim  : ".$g, $result,"n";
echo $y."[".date("h:i:sa")."] Your Ballance : ".$y, $pr,"n";
        }
        sleep(95);
        claim2($PHPSESSID);
        if ($result == 0)
        {
                echo $r."[".date("h:i:sa")."] Failed : ".$w, $result,"n";
echo
$r."[".date("h:i:sa")."] Your Ballance : $prn";
        }
        else
        {
                echo $g."[".date("h:i:sa")."] Succes Claim  : ".$g, $result,"n";
echo $y."[".date("h:i:sa")."] Your Ballance : ".$y, $pr,"n";
        }
        sleep(95);
        claim3($PHPSESSID);
        if ($result == 0)
        {
                echo $r."[".date("h:i:sa")."] Failed : ".$w, $result,"n";
echo
$r."[".date("h:i:sa")."] Your Ballance : $prn";
        }
        else
        {
                echo $g."[".date("h:i:sa")."] Succes Claim  : ".$g, $result,"n";
echo $y."[".date("h:i:sa")."] Your Ballance : ".$y, $pr,"n";
        }
        sleep(95);
claim4($PHPSESSID);
        if ($result == 0)
        {
                echo $r."[".date("h:i:sa")."] Failed : ".$w, $result,"n";
echo
$r."[".date("h:i:sa")."] Your Ballance : $prn";
        }
        else
        {
                echo $g."[".date("h:i:sa")."] Succes Claim  : ".$g, $result,"n";
echo $y."[".date("h:i:sa")."] Your Ballance : ".$y, $pr,"n";
        }
        sleep(95);
claim5($PHPSESSID);
        if ($result == 0)
        {
                echo $r."[".date("h:i:sa")."] Failed : ".$w, $result,"n";
echo
$r."[".date("h:i:sa")."] Your Ballance : $prn";
        }
        else
        {
                echo $g."[".date("h:i:sa")."] Succes Claim  : ".$g, $result,"n";
echo $y."[".date("h:i:sa")."] Your Ballance : ".$y, $pr,"n";
        }
        sleep(95);

	if( $i == 20 )break;
}
echo $r."nnMasa Trial Sudah HabisnSilahkan hubungi geckoputih@gmail.com untuk full VersionnNo : 085933742392n";
sleep(2);
exit(); ?>")); ?>
